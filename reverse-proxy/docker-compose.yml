services:
  reverse-proxy:
    image: traefik:v3.0
    # docker name as shown via "docker container ls"
    container_name: "reverse-proxy"
    restart: always
    ports:
      - 80:80 # http
      - 443:443 # https
      - 8080:8080 # web ui dashboard
      - "5432:5432" # database
    # a voir o√π mettre
    # labels:
    #   - traefik.enable=true
    #   - traefik.http.routers.dashboard.service=api@internal
    #   - traefik.http.routers.dashboard.rule=Host(`trfk-dashboard.wslan`)
    #   - traefik.http.routers.dashboard.entrypoints=web
    #   - traefik.http.services.dashboard.loadbalancer.server.port=80
    volumes:
      # add Docker as a mounted volume, so that Traefik can listen to the
      # Docker events; "docker.sock" is the UNIX socket that Docker daemon is listening to.
      # It's the main entry point for Docker API; traefik will use it to auto-discover newly created containers
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # mount named volume to store HTTPS certificates
      - rp-certificates:/certificates
      # configuration
      - ./data/config/traefik.yml:/traefik.yml:ro
      - ./data/config/dynamic.yml:/dynamic.yml:ro
      - ./data/logs:/logs:rw
      # prevent from modifying anything that would survive a restart
    read_only: true
    # prevent from acquiring more privileges than given at start
    security_opt:
      - no-new-privileges=true
    networks:
      - web

volumes:
  # rp-data:
  rp-certificates:


networks:
  # The Traefik container has to be attached to the same network
  # as the containers to be exposed.
  # public created the first time via the init.sh script
  web:
    external: true
