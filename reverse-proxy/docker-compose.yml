services:
  reverse-proxy:
    image: traefik:v3.3
    # docker name as shown via "docker container ls"
    container_name: reverse-proxy
    restart: always
    # prevent from modifying anything that would survive a restart
    read_only: true
    # prevent from acquiring more privileges than given at start
    security_opt:
      - no-new-privileges=true
    networks:
      - shared
    ports:
      - 80:80 # http
      - 443:443 # https
      - 8080:8080 # web ui dashboard
      - 5432:5432 # database
    volumes:
      - /etc/localtime:/etc/localtime:ro
      # Docker API's main entry point: use by traefik to auto-discover containers
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # configuration TRAEFIK
      - ./config/traefik.yml:/traefik.yml:ro
      - ./config/dynamic.yml:/dynamic.yml:ro
      # configuration LET'S ENCRYPT
      - ./acme.json:/acme.json
      # configuration LET'S ENCRYPT
      - ./secrets/users_file:/users_file
      # logs
      - ./logs:/logs:rw
    env_file:
      - ./.env
    command:
      - '--certificatesresolvers.letsencrypt.acme.email=${CERT_EMAIL}'
    labels:
      traefik.enable: true
      traefik.docker.network: ${SHARED_NETWORK}
      # router
      traefik.http.routers.reverse-proxy.entrypoints: websecure
      traefik.http.routers.reverse-proxy.middlewares: "user-auth@file,default@file"
      traefik.http.routers.reverse-proxy.rule: Host(`${REVERSE_PROXY_HOST}`)
      traefik.http.routers.reverse-proxy.tls.certresolver: "letsencrypt"
      traefik.http.routers.reverse-proxy.tls.options: "modern@file"
      traefik.http.routers.reverse-proxy.tls: true
      traefik.http.routers.reverse-proxy.service: api@internal
      # service
      traefik.http.services.reverse-proxy.loadbalancer.server.port: 8080
      traefik.http.services.reverse-proxy.loadbalancer.sticky.cookie.httpOnly: true
      traefik.http.services.reverse-proxy.loadbalancer.sticky.cookie.secure: true
      traefik.http.services.reverse-proxy.loadbalancer.sticky.cookie.name: reverse-proxy_sticky
      traefik.http.services.reverse-proxy.loadbalancer.sticky.cookie: true
      

networks:
  shared:
    external: true
    name: ${SHARED_NETWORK}
